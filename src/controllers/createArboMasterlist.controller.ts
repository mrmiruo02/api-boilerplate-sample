import insertArboMasterList from '../persisters/createArboMasterlist.persister.ts';
import validationInput from '../utils/validation.utils.ts';
import { arbo_masterlist } from '../model/createArboMasterlist.model.ts';
import { Request, Response } from 'express';
import { encrypt } from '../utils/crypt.util.ts';

/**
 * Register a user in the database with valid credentials
 * @param {Request} req
 * @param {Response} res
 */
const createArboMasterlistController = async (req: Request, res: Response): Promise<void> => {
  const masterlist = validationInput(arbo_masterlist, req.body); // Handles validation and throws if needed

  const encryptData = {
    region_name: encrypt(masterlist.region_name),
    region_code: encrypt(masterlist.region_code),
    province_name: encrypt(masterlist.province_name),
    province_code: encrypt(masterlist.province_code),
    muncity_name: encrypt(masterlist.muncity_name),
    muncity_code: encrypt(masterlist.muncity_code),
    barangay_name: encrypt(masterlist.barangay_name),
    barangay_code: encrypt(masterlist.barangay_code),
    cd: encrypt(masterlist.cd),
    arc_type: encrypt(masterlist.arc_type),
    arc_id: encrypt(masterlist.arc_id),
    arc_name: encrypt(masterlist.arc_name),
    arc_cluster_name: encrypt(masterlist.arc_cluster_name),
    arbo_name: encrypt(masterlist.arbo_name),
    arbo_id: encrypt(masterlist.arbo_id),
    oma_level_2013: encrypt(masterlist.oma_level_2013),
    itema_status_2019: encrypt(masterlist.itema_status_2019),
    itema_level_2019: encrypt(masterlist.itema_level_2019),
    itema_status_current: encrypt(masterlist.itema_status_current),
    itema_level_current: encrypt(masterlist.itema_level_current),
    organization_status: encrypt(masterlist.organization_status),
    organization_type: encrypt(masterlist.organization_type),
    year_organized: encrypt(masterlist.year_organized),
    registering_agency: encrypt(masterlist.registering_agency),
    year_registration: encrypt(masterlist.year_registration),
    baseline_members: encrypt(masterlist.baseline_members),
    baseline_members_male: encrypt(masterlist.baseline_members_male),
    baseline_members_female: encrypt(masterlist.baseline_members_female),
    baseline_total_arbs: encrypt(masterlist.baseline_total_arbs),
    baseline_male_arbs: encrypt(masterlist.baseline_male_arbs),
    baseline_female_arbs: encrypt(masterlist.baseline_female_arbs),
    baseline_total_nonarbs: encrypt(masterlist.baseline_total_nonarbs),
    baseline_male_nonarbs: encrypt(masterlist.baseline_male_nonarbs),
    baseline_female_nonarbs: encrypt(masterlist.baseline_female_nonarbs),
    current_members: encrypt(masterlist.current_members),
    current_members_male: encrypt(masterlist.current_members_male),
    current_members_female: encrypt(masterlist.current_members_female),
    current_total_arbs: encrypt(masterlist.current_total_arbs),
    current_male_arbs: encrypt(masterlist.current_male_arbs),
    current_female_arbs: encrypt(masterlist.current_female_arbs),
    current_total_nonarbs: encrypt(masterlist.current_total_nonarbs),
    current_male_nonarbs: encrypt(masterlist.current_male_nonarbs),
    current_female_nonarbs: encrypt(masterlist.current_female_nonarbs),
    cbu_current: encrypt(masterlist.cbu_current),
    cbu_mem_current: encrypt(masterlist.cbu_mem_current),
    savings_current: encrypt(masterlist.savings_current),
    sav_mem_current: encrypt(masterlist.sav_mem_current),
    assets_current: encrypt(masterlist.assets_current),
    liabilities_current: encrypt(masterlist.liabilities_current),
    services_provided: encrypt(masterlist.services_provided),
    trainings_cap_dev: encrypt(masterlist.trainings_cap_dev),
    apcp: encrypt(masterlist.apcp),
    linksfarm: encrypt(masterlist.linksfarm),
    up_valuing: encrypt(masterlist.up_valuing),
    cp_wash: encrypt(masterlist.cp_wash),
    coop_strengthening: encrypt(masterlist.coop_strengthening),
    vlcep: encrypt(masterlist.vlcep),
    vlfed: encrypt(masterlist.vlfed),
    pbd_lawyering: encrypt(masterlist.pbd_lawyering),
    social_entrep: encrypt(masterlist.social_entrep),
    sustainable_debris: encrypt(masterlist.sustainable_debris),
    sustainable_livelihood: encrypt(masterlist.sustainable_livelihood),
    climate_proofing: encrypt(masterlist.climate_proofing),
    pahp: encrypt(masterlist.pahp),
    cbvcd: encrypt(masterlist.cbvcd),
    fbs: encrypt(masterlist.fbs),
    pilot_climate_proof: encrypt(masterlist.pilot_climate_proof),
    cap_pbd: encrypt(masterlist.cap_pbd),
    card: encrypt(masterlist.card),
    watsan: encrypt(masterlist.watsan),
    pablo: encrypt(masterlist.pablo),
    micoop: encrypt(masterlist.micoop),
    malp: encrypt(masterlist.malp),
    csf: encrypt(masterlist.csf),
    aes: encrypt(masterlist.aes),
    bds: encrypt(masterlist.bds),
    pamana: encrypt(masterlist.pamana),
    bub_dar: encrypt(masterlist.bub_dar),
    arf: encrypt(masterlist.arf),
    sbfp: encrypt(masterlist.sbfp),
    claap: encrypt(masterlist.claap),
    arbold: encrypt(masterlist.arbold),
    total_1: encrypt(masterlist.total_1),
    arcdp_i: encrypt(masterlist.arcdp_i),
    arcdp_ii: encrypt(masterlist.arcdp_ii),
    arcp_i: encrypt(masterlist.arcp_i),
    arcp_ii: encrypt(masterlist.arcp_ii),
    arisp_i: encrypt(masterlist.arisp_i),
    arisp_ii: encrypt(masterlist.arisp_ii),
    arisp_iii: encrypt(masterlist.arisp_iii),
    bcsea_bazal: encrypt(masterlist.bcsea_bazal),
    bcsea_umiray: encrypt(masterlist.bcsea_umiray),
    birasp: encrypt(masterlist.birasp),
    cmarprp: encrypt(masterlist.cmarprp),
    converge: encrypt(masterlist.converge),
    iarcdsp: encrypt(masterlist.iarcdsp),
    minsaad: encrypt(masterlist.minsaad),
    nmciremp: encrypt(masterlist.nmciremp),
    papsra: encrypt(masterlist.papsra),
    spots: encrypt(masterlist.spots),
    spots_ii: encrypt(masterlist.spots_ii),
    starcm: encrypt(masterlist.starcm),
    tpkp: encrypt(masterlist.tpkp),
    wmcip: encrypt(masterlist.wmcip),
    total_2: encrypt(masterlist.total_2),
    grand_total: encrypt(masterlist.grand_total),
    remarks: encrypt(masterlist.remarks),
    status: encrypt(masterlist.status),
  };

  await insertArboMasterList(encryptData);

  res.status(201).json({
    status: 'success',
    code: 201,
    message: 'successfully registered user',
    data: masterlist,
  });
};

export default createArboMasterlistController;

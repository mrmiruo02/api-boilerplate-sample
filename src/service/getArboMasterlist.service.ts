import validationInput from '../utils/validation.utils.ts';
import getArboMasterlist from '../persisters/getArboMasterlist.persisters.ts';
import { decrypt, encrypt } from '../utils/crypt.util.ts';
import { CryptGetArboMasterlistResModel } from '../model/crypt/getArboMasterlistCrypt.model.ts';
import { GetArboMasterlistReqModel } from '../model/request/getArboMasterlistReq.model.ts';
import { GetArboMasterlistResModel, getArboMasterlistResModel } from '../model/response/getArboMasterlistRes.model.ts';

const businessLogic = async (
  req: GetArboMasterlistReqModel,
  requestSearch: boolean
): Promise<GetArboMasterlistResModel> => {
  // Handles validation and throws if needed

  let arboMasterlist: CryptGetArboMasterlistResModel[] = [];

  if (!requestSearch) {
    arboMasterlist = (await getArboMasterlist()) as [];
  } else {
    const encryptedData = [
      {
        id: req.id,
        region_name: encrypt(req.region_name),
        region_code: encrypt(req.region_code),
        province_name: encrypt(req.province_name),
        province_code: encrypt(req.province_code),
        muncity_name: encrypt(req.muncity_name),
        muncity_code: encrypt(req.muncity_code),
        barangay_name: encrypt(req.barangay_name),
        barangay_code: encrypt(req.barangay_code),
        cd: encrypt(req.cd),
        arc_type: encrypt(req.arc_type),
        arc_id: encrypt(req.arc_id),
        arc_name: encrypt(req.arc_name),
        arc_cluster_name: encrypt(req.arc_cluster_name),
        arbo_name: encrypt(req.arbo_name),
        arbo_id: encrypt(req.arbo_id),
        oma_level_2013: encrypt(req.oma_level_2013),
        itema_status_2019: encrypt(req.itema_status_2019),
        itema_level_2019: encrypt(req.itema_level_2019),
        itema_status_current: encrypt(req.itema_status_current),
        itema_level_current: encrypt(req.itema_level_current),
        organization_status: encrypt(req.organization_status),
        organization_type: encrypt(req.organization_type),
        year_organized: encrypt(req.year_organized),
        registering_agency: encrypt(req.registering_agency),
        year_registration: encrypt(req.year_registration),
        baseline_members: encrypt(req.baseline_members),
        baseline_members_male: encrypt(req.baseline_members_male),
        baseline_members_female: encrypt(req.baseline_members_female),
        baseline_total_arbs: encrypt(req.baseline_total_arbs),
        baseline_male_arbs: encrypt(req.baseline_male_arbs),
        baseline_female_arbs: encrypt(req.baseline_female_arbs),
        baseline_total_nonarbs: encrypt(req.baseline_total_nonarbs),
        baseline_male_nonarbs: encrypt(req.baseline_male_nonarbs),
        baseline_female_nonarbs: encrypt(req.baseline_female_nonarbs),
        current_members: encrypt(req.current_members),
        current_members_male: encrypt(req.current_members_male),
        current_members_female: encrypt(req.current_members_female),
        current_total_arbs: encrypt(req.current_total_arbs),
        current_male_arbs: encrypt(req.current_male_arbs),
        current_female_arbs: encrypt(req.current_female_arbs),
        current_total_nonarbs: encrypt(req.current_total_nonarbs),
        current_male_nonarbs: encrypt(req.current_male_nonarbs),
        current_female_nonarbs: encrypt(req.current_female_nonarbs),
        cbu_current: encrypt(req.cbu_current),
        cbu_mem_current: encrypt(req.cbu_mem_current),
        savings_current: encrypt(req.savings_current),
        sav_mem_current: encrypt(req.sav_mem_current),
        assets_current: encrypt(req.assets_current),
        liabilities_current: encrypt(req.liabilities_current),
        services_provided: encrypt(req.services_provided),
        trainings_cap_dev: encrypt(req.trainings_cap_dev),
        apcp: encrypt(req.apcp),
        linksfarm: encrypt(req.linksfarm),
        up_valuing: encrypt(req.up_valuing),
        cp_wash: encrypt(req.cp_wash),
        coop_strengthening: encrypt(req.coop_strengthening),
        vlcep: encrypt(req.vlcep),
        vlfed: encrypt(req.vlfed),
        pbd_lawyering: encrypt(req.pbd_lawyering),
        social_entrep: encrypt(req.social_entrep),
        sustainable_debris: encrypt(req.sustainable_debris),
        sustainable_livelihood: encrypt(req.sustainable_livelihood),
        climate_proofing: encrypt(req.climate_proofing),
        pahp: encrypt(req.pahp),
        cbvcd: encrypt(req.cbvcd),
        fbs: encrypt(req.fbs),
        pilot_climate_proof: encrypt(req.pilot_climate_proof),
        cap_pbd: encrypt(req.cap_pbd),
        card: encrypt(req.card),
        watsan: encrypt(req.watsan),
        pablo: encrypt(req.pablo),
        micoop: encrypt(req.micoop),
        malp: encrypt(req.malp),
        csf: encrypt(req.csf),
        aes: encrypt(req.aes),
        bds: encrypt(req.bds),
        pamana: encrypt(req.pamana),
        bub_dar: encrypt(req.bub_dar),
        arf: encrypt(req.arf),
        sbfp: encrypt(req.sbfp),
        claap: encrypt(req.claap),
        arbold: encrypt(req.arbold),
        total_1: encrypt(req.total_1),
        arcdp_i: encrypt(req.arcdp_i),
        arcdp_ii: encrypt(req.arcdp_ii),
        arcp_i: encrypt(req.arcp_i),
        arcp_ii: encrypt(req.arcp_ii),
        arisp_i: encrypt(req.arisp_i),
        arisp_ii: encrypt(req.arisp_ii),
        arisp_iii: encrypt(req.arisp_iii),
        bcsea_bazal: encrypt(req.bcsea_bazal),
        bcsea_umiray: encrypt(req.bcsea_umiray),
        birasp: encrypt(req.birasp),
        cmarprp: encrypt(req.cmarprp),
        converge: encrypt(req.converge),
        iarcdsp: encrypt(req.iarcdsp),
        minsaad: encrypt(req.minsaad),
        nmciremp: encrypt(req.nmciremp),
        papsra: encrypt(req.papsra),
        spots: encrypt(req.spots),
        spots_ii: encrypt(req.spots_ii),
        starcm: encrypt(req.starcm),
        tpkp: encrypt(req.tpkp),
        wmcip: encrypt(req.wmcip),
        total_2: encrypt(req.total_2),
        grand_total: encrypt(req.grand_total),
        remarks: encrypt(req.remarks),
        status: req.status,
        time_stamp: req.time_stamp,
      },
    ];
    arboMasterlist = (await getArboMasterlist(encryptedData, requestSearch)) as CryptGetArboMasterlistResModel[];
  }

  const decryptData = arboMasterlist.map((masterlist) => ({
    id: masterlist.id,
    region_name: decrypt(masterlist.region_name),
    region_code: decrypt(masterlist.region_code),
    province_name: decrypt(masterlist.province_name),
    province_code: decrypt(masterlist.province_code),
    muncity_name: decrypt(masterlist.muncity_name),
    muncity_code: decrypt(masterlist.muncity_code),
    barangay_name: decrypt(masterlist.barangay_name),
    barangay_code: decrypt(masterlist.barangay_code),
    cd: decrypt(masterlist.cd),
    arc_type: decrypt(masterlist.arc_type),
    arc_id: decrypt(masterlist.arc_id),
    arc_name: decrypt(masterlist.arc_name),
    arc_cluster_name: decrypt(masterlist.arc_cluster_name),
    arbo_name: decrypt(masterlist.arbo_name),
    arbo_id: decrypt(masterlist.arbo_id),
    oma_level_2013: decrypt(masterlist.oma_level_2013),
    itema_status_2019: decrypt(masterlist.itema_status_2019),
    itema_level_2019: decrypt(masterlist.itema_level_2019),
    itema_status_current: decrypt(masterlist.itema_status_current),
    itema_level_current: decrypt(masterlist.itema_level_current),
    organization_status: decrypt(masterlist.organization_status),
    organization_type: decrypt(masterlist.organization_type),
    year_organized: decrypt(masterlist.year_organized),
    registering_agency: decrypt(masterlist.registering_agency),
    year_registration: decrypt(masterlist.year_registration),
    baseline_members: decrypt(masterlist.baseline_members),
    baseline_members_male: decrypt(masterlist.baseline_members_male),
    baseline_members_female: decrypt(masterlist.baseline_members_female),
    baseline_total_arbs: decrypt(masterlist.baseline_total_arbs),
    baseline_male_arbs: decrypt(masterlist.baseline_male_arbs),
    baseline_female_arbs: decrypt(masterlist.baseline_female_arbs),
    baseline_total_nonarbs: decrypt(masterlist.baseline_total_nonarbs),
    baseline_male_nonarbs: decrypt(masterlist.baseline_male_nonarbs),
    baseline_female_nonarbs: decrypt(masterlist.baseline_female_nonarbs),
    current_members: decrypt(masterlist.current_members),
    current_members_male: decrypt(masterlist.current_members_male),
    current_members_female: decrypt(masterlist.current_members_female),
    current_total_arbs: decrypt(masterlist.current_total_arbs),
    current_male_arbs: decrypt(masterlist.current_male_arbs),
    current_female_arbs: decrypt(masterlist.current_female_arbs),
    current_total_nonarbs: decrypt(masterlist.current_total_nonarbs),
    current_male_nonarbs: decrypt(masterlist.current_male_nonarbs),
    current_female_nonarbs: decrypt(masterlist.current_female_nonarbs),
    cbu_current: decrypt(masterlist.cbu_current),
    cbu_mem_current: decrypt(masterlist.cbu_mem_current),
    savings_current: decrypt(masterlist.savings_current),
    sav_mem_current: decrypt(masterlist.sav_mem_current),
    assets_current: decrypt(masterlist.assets_current),
    liabilities_current: decrypt(masterlist.liabilities_current),
    services_provided: decrypt(masterlist.services_provided),
    trainings_cap_dev: decrypt(masterlist.trainings_cap_dev),
    apcp: decrypt(masterlist.apcp),
    linksfarm: decrypt(masterlist.linksfarm),
    up_valuing: decrypt(masterlist.up_valuing),
    cp_wash: decrypt(masterlist.cp_wash),
    coop_strengthening: decrypt(masterlist.coop_strengthening),
    vlcep: decrypt(masterlist.vlcep),
    vlfed: decrypt(masterlist.vlfed),
    pbd_lawyering: decrypt(masterlist.pbd_lawyering),
    social_entrep: decrypt(masterlist.social_entrep),
    sustainable_debris: decrypt(masterlist.sustainable_debris),
    sustainable_livelihood: decrypt(masterlist.sustainable_livelihood),
    climate_proofing: decrypt(masterlist.climate_proofing),
    pahp: decrypt(masterlist.pahp),
    cbvcd: decrypt(masterlist.cbvcd),
    fbs: decrypt(masterlist.fbs),
    pilot_climate_proof: decrypt(masterlist.pilot_climate_proof),
    cap_pbd: decrypt(masterlist.cap_pbd),
    card: decrypt(masterlist.card),
    watsan: decrypt(masterlist.watsan),
    pablo: decrypt(masterlist.pablo),
    micoop: decrypt(masterlist.micoop),
    malp: decrypt(masterlist.malp),
    csf: decrypt(masterlist.csf),
    aes: decrypt(masterlist.aes),
    bds: decrypt(masterlist.bds),
    pamana: decrypt(masterlist.pamana),
    bub_dar: decrypt(masterlist.bub_dar),
    arf: decrypt(masterlist.arf),
    sbfp: decrypt(masterlist.sbfp),
    claap: decrypt(masterlist.claap),
    arbold: decrypt(masterlist.arbold),
    total_1: decrypt(masterlist.total_1),
    arcdp_i: decrypt(masterlist.arcdp_i),
    arcdp_ii: decrypt(masterlist.arcdp_ii),
    arcp_i: decrypt(masterlist.arcp_i),
    arcp_ii: decrypt(masterlist.arcp_ii),
    arisp_i: decrypt(masterlist.arisp_i),
    arisp_ii: decrypt(masterlist.arisp_ii),
    arisp_iii: decrypt(masterlist.arisp_iii),
    bcsea_bazal: decrypt(masterlist.bcsea_bazal),
    bcsea_umiray: decrypt(masterlist.bcsea_umiray),
    birasp: decrypt(masterlist.birasp),
    cmarprp: decrypt(masterlist.cmarprp),
    converge: decrypt(masterlist.converge),
    iarcdsp: decrypt(masterlist.iarcdsp),
    minsaad: decrypt(masterlist.minsaad),
    nmciremp: decrypt(masterlist.nmciremp),
    papsra: decrypt(masterlist.papsra),
    spots: decrypt(masterlist.spots),
    spots_ii: decrypt(masterlist.spots_ii),
    starcm: decrypt(masterlist.starcm),
    tpkp: decrypt(masterlist.tpkp),
    wmcip: decrypt(masterlist.wmcip),
    total_2: decrypt(masterlist.total_2),
    grand_total: decrypt(masterlist.grand_total),
    remarks: decrypt(masterlist.remarks),
    status: masterlist.status,
    time_stamp: masterlist.time_stamp,
  }));

  const result = validationInput(getArboMasterlistResModel, decryptData) as GetArboMasterlistResModel;

  return result;
};

const getArboMasterlistService = { businessLogic };

export default getArboMasterlistService;
